# Use an official node runtime as a parent image
FROM node:22-slim AS buildnode

WORKDIR /app/
RUN chown node:root /app

ARG FONTAWESOME_PACKAGE_TOKEN
ENV FONTAWESOME_PACKAGE_TOKEN=${FONTAWESOME_PACKAGE_TOKEN}

# Install dependencies
COPY ./src/frontend/package.json /app/
COPY ./src/frontend/package-lock.json /app/
COPY ./src/frontend/.npmrc /app/
RUN npm install

# Add rest of the client code
COPY ./src/frontend /app/
RUN chown node:root /app/node_modules

# OpenShift runs as node, not as root (while docker runs as root), so need to
# ensure running user can write to its home directory--without setting this,
# home is /, so node can't create a cache dir
ENV HOME /home/node

RUN npm run openshift_build

FROM nginx:stable-alpine

EXPOSE 3000

RUN touch /run/nginx.pid

COPY ./compose/frontend/default.conf /etc/nginx/conf.d
COPY ./compose/frontend/default_maintenance.txt /etc/nginx
COPY ./compose/frontend/legacy_redirects.conf /etc/nginx
COPY ./compose/frontend/security_headers.conf /etc/nginx/conf.d
COPY --from=buildnode /app/build /usr/share/nginx/html
RUN chmod -R 777 /run /var/log/nginx /var/cache/nginx /usr/share/nginx/html/static/js /usr/share/nginx/html/static/css /usr/share/nginx/html/static/media /etc/nginx/conf.d

ARG DEBUG_BUILD=false

# Add debugging tools into builds if enabled
RUN if [ ${DEBUG_BUILD} = true ]; then \
  apk update && apk add --no-cache jq vim procps less; \
fi

COPY ./compose/frontend/entrypoint /docker-entrypoint.d/add_client_env.sh
RUN sed -i 's/\r$//g' /docker-entrypoint.d/add_client_env.sh && chmod +x /docker-entrypoint.d/add_client_env.sh
