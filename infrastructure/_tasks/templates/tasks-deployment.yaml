{{- $deploymentTag := .Values.image.tag | default .Chart.AppVersion -}}
{{- $deploymentTime := now | date "2006-01-02 15:04:05.000000" -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "app.fullname" . }}
  labels: {{ include "app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{ include "app.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ include "app.selectorLabels" . | nindent 8 }}
    spec:
      volumes:
        - name: django-app-images-volume
          persistentVolumeClaim:
            claimName: {{ .Values.deployment.volumes.claimName  }}
      containers:
        - resources:
            limits:
              cpu: {{ .Values.deployment.resources.limits.cpu  }}
              memory: {{ .Values.deployment.resources.limits.memory  }}
            requests:
              cpu: {{ .Values.deployment.resources.requests.cpu  }}
              memory: {{ .Values.deployment.resources.requests.memory  }}
          name: {{ include "app.fullname" . }}
          command:
            - /start_tasks.sh          
          env:
            - name: DEPLOYMENT_TAG
              value: {{ $deploymentTag | quote }}
            - name: DEPLOYMENT_TIME
              value: {{ $deploymentTime | quote }}
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: host
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: port
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: user
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: password
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: dbname
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.deployment.env.postgresSecret  }}
                  key: dbname
          envFrom:
            - configMapRef:
                name: {{ .Values.deployment.env.djangoConfigMap  }}
            - secretRef:
                name: {{ .Values.deployment.env.djangoSecret  }}
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: django-app-images-volume
              mountPath: /app/images/webcams
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: File
          image: >-
            {{ .Values.image.repository  }}:{{ .Values.image.tag  }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - '-c'
                - python manage.py huey_health_check
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            runAsNonRoot: true
            allowPrivilegeEscalation: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "app.kubernetes.io/instance"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ template "app.name" . }}