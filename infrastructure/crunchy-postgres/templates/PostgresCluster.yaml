{{- if .Values.crunchy.enabled }}
apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  name: {{ template "crunchy-postgres.fullname" . }}
  labels: {{ include "crunchy-postgres.labels" . | nindent 4 }}
spec:
  metadata:
    labels: {{ include "crunchy-postgres.labels" . | nindent 6 }}
  imagePullPolicy: {{ .Values.crunchy.imagePullPolicy }}
  postgresVersion: {{ .Values.crunchy.postgresVersion }}
  {{ if .Values.crunchy.postGISVersion }}
  postGISVersion: {{ .Values.crunchy.postGISVersion | quote }}
  {{ end }}
  openshift: true
  {{- if and .Values.crunchy.clone .Values.crunchy.clone.enabled }} # enabled when cloning from s3
  dataSource:
    {{- if .Values.crunchy.clone.s3.enabled }}
    pgbackrest:
      stanza: {{ .Values.crunchy.instances.name }}
      configuration:
        - secret:
            name: {{ .Values.crunchy.clone.s3SecretName }}
      global:
        repo2-s3-uri-style: path # This is mandatory since the backups are path based.
        repo2-path: {{ .Values.crunchy.clone.path }} # path to the backup where cluster will bootstrap from
      repo:
        name: repo2 # hardcoded since repo 2, it is always backed up to object storage.
        s3:
          bucket: {{ .Values.crunchy.clone.bucket }}
          endpoint: {{ .Values.crunchy.clone.endpoint }}
          region: "ca-central-1"
    {{- end }}
    {{- if .Values.crunchy.clone.pvc.enabled }}
    postgresCluster:
      clusterName: {{ template "crunchy-postgres.fullname" . }}
      repoName: repo1
    {{- end }}
  {{- end }}
  {{- if .Values.crunchy.pgmonitor.enabled }}
  monitoring:
    pgmonitor:
      # this stuff is for the "exporter" container in the "postgres-cluster-ha" set of pods
      exporter:
        {{ if .Values.crunchy.pgmonitor.exporter.image }}
        image: {{ .Values.crunchy.pgmonitor.exporter.image }}
        {{ end }}
        resources:
          requests:
            cpu: {{ .Values.crunchy.pgmonitor.exporter.requests.cpu }}
            memory: {{ .Values.crunchy.pgmonitor.exporter.requests.memory }}
          limits:
            memory: {{ .Values.crunchy.pgmonitor.exporter.limits.memory }}

  {{ end }}

  {{- if .Values.crunchy.standby }}
  {{- if .Values.crunchy.standby.enabled }}
  standby:
    enabled: true
    repoName: {{ .Values.crunchy.standby.repoName }}
  {{- end }}
  {{- end }}

  shutdown: {{ .Values.crunchy.shutdown }}

  instances:
    - name: {{ .Values.crunchy.instances.name }}
      {{- if .Values.crunchy.instances.metadata }}
      metadata:
        {{- toYaml .Values.crunchy.instances.metadata | nindent 8 }}
      {{- end }}
      replicas: {{ .Values.crunchy.instances.replicas }}
      resources:
        requests:
          cpu: {{ .Values.crunchy.instances.requests.cpu }}
          memory: {{ .Values.crunchy.instances.requests.memory }}
        limits:
          memory: {{ .Values.crunchy.instances.limits.memory }}

      sidecars:
        replicaCertCopy:
          resources:
            requests:
              cpu: {{ .Values.crunchy.instances.replicaCertCopy.requests.cpu }}
              memory: {{ .Values.crunchy.instances.replicaCertCopy.requests.memory }}
            limits:
              memory: {{ .Values.crunchy.instances.replicaCertCopy.limits.memory }}
      dataVolumeClaimSpec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.crunchy.instances.dataVolumeClaimSpec.storage }}
        storageClassName: {{ .Values.crunchy.instances.dataVolumeClaimSpec.storageClassName }}
      walVolumeClaimSpec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.crunchy.instances.dataVolumeClaimSpec.walStorage }}
        storageClassName: {{ .Values.crunchy.instances.dataVolumeClaimSpec.storageClassName }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    postgres-operator.crunchydata.com/cluster:
                      {{ template "crunchy-postgres.fullname" . }}
                    postgres-operator.crunchydata.com/instance-set: {{ .Values.crunchy.instances.name }}

  users:
    - name: {{ .Values.global.config.dbName }}
      databases:
        - {{ .Values.global.config.dbName }}
      options: "LOGIN"
    - name: postgres
      databases:
        - postgres
        - {{ .Values.global.config.dbName }}
    - name: {{ .Values.global.config.dbName }}proxy # this user lets dev connect to postgres via pgbouncer from local system
      databases:
        - {{ .Values.global.config.dbName }}
        - postgres
    {{- if .Values.crunchy.pgBackRest.enabled }}
  backups:
    pgbackrest:
      {{- if .Values.crunchy.pgBackRest.s3.enabled }}
      configuration:
        - secret:
            name: {{ .Release.Name }}-s3-secret
      {{- end }}
      global:
        repo1-retention-full: {{ .Values.crunchy.pgBackRest.pvc.retention | quote }}
        repo1-retention-full-type: {{ .Values.crunchy.pgBackRest.pvc.retentionFullType }}
        {{- if .Values.crunchy.pgBackRest.s3.enabled }}
        repo2-retention-full: {{ .Values.crunchy.pgBackRest.s3.retention | quote }}
        repo2-retention-full-type: {{ .Values.crunchy.pgBackRest.retentionFullType }}
        repo2-path: '{{ .Values.crunchy.pgBackRest.backupPath }}/{{ .Values.crunchy.pgBackRest.clusterCounter }}'
        repo2-s3-uri-style: path
        {{- end }}
      repos:
        - name: repo1
          schedules:
            full: {{ .Values.crunchy.pgBackRest.pvc.fullBackupSchedule }}
            incremental: {{ .Values.crunchy.pgBackRest.pvc.incrementalBackupSchedule }}
          volume:
            volumeClaimSpec:
              accessModes:
                - {{ .Values.crunchy.pgBackRest.pvc.volume.accessModes }}
              resources:
                requests:
                  storage: {{ .Values.crunchy.pgBackRest.pvc.volume.storage }}
              storageClassName: {{ .Values.crunchy.pgBackRest.pvc.volume.storageClassName }}
      {{- if .Values.crunchy.pgBackRest.s3.enabled }}
        - name: repo2
          schedules:
            full: {{ .Values.crunchy.pgBackRest.s3.fullBackupSchedule }}
            incremental: {{ .Values.crunchy.pgBackRest.s3.incrementalBackupSchedule }}
          s3:
            bucket: {{ .Values.crunchy.pgBackRest.s3.bucket | quote }}
            endpoint: {{ .Values.crunchy.pgBackRest.s3.endpoint | quote }}
            region: "ca-central-1"
        {{- end }}
      {{- if and .Values.crunchy.restore .Values.crunchy.restore.enabled }}
      restore:
        enabled: {{ .Values.crunchy.restore.enabled }}
        repoName: {{ .Values.crunchy.restore.repoName }}
        options:
          - --type=time
          - --target="{{ .Values.crunchy.restore.target }}"
      {{- end }}
      manual:
        options:
          - --type=full
        repoName: {{ .Values.crunchy.pgBackRest.manual.repo }}
      # this stuff is for the "pgbackrest" container (the only non-init container) in the "postgres-crunchy-repo-host" pod
      repoHost:
        resources:
          requests:
            cpu: {{ .Values.crunchy.pgBackRest.repoHost.requests.cpu }}
            memory: {{ .Values.crunchy.pgBackRest.repoHost.requests.memory }}
          limits:
            memory: {{ .Values.crunchy.pgBackRest.repoHost.limits.memory }}
      sidecars:
        # this stuff is for the "pgbackrest" container in the "postgres-crunchy-ha" set of pods
        pgbackrest:
          resources:
            requests:
              cpu: {{ .Values.crunchy.pgBackRest.sidecars.requests.cpu }}
              memory: {{ .Values.crunchy.pgBackRest.sidecars.requests.memory }}
            limits:
              memory: {{ .Values.crunchy.pgBackRest.sidecars.limits.memory }}
        pgbackrestConfig:
          resources:
            requests:
              cpu: {{ .Values.crunchy.pgBackRest.config.requests.cpu }}
              memory: {{ .Values.crunchy.pgBackRest.config.requests.memory }}
            limits:
              memory: {{ .Values.crunchy.pgBackRest.config.limits.memory }}
      jobs:
        resources:
          requests:
            cpu: {{ .Values.crunchy.pgBackRest.jobs.requests.cpu }}
            memory: {{ .Values.crunchy.pgBackRest.jobs.requests.memory }}
          limits:
            memory: {{ .Values.crunchy.pgBackRest.jobs.limits.memory }}
  {{- end }}
  patroni:
    dynamicConfiguration:
      postgresql:
        pg_hba: {{ toYaml .Values.crunchy.patroni.postgresql.pg_hba | nindent 10 }}
        parameters:
          log_min_duration_statement: {{ .Values.crunchy.patroni.postgresql.parameters.log_min_duration_statement }}
          shared_buffers: {{ .Values.crunchy.patroni.postgresql.parameters.shared_buffers }}
          wal_buffers: {{ .Values.crunchy.patroni.postgresql.parameters.wal_buffers }}
          work_mem: {{ .Values.crunchy.patroni.postgresql.parameters.work_mem }}
          min_wal_size: {{ .Values.crunchy.patroni.postgresql.parameters.min_wal_size }}
          max_wal_size: {{ .Values.crunchy.patroni.postgresql.parameters.max_wal_size }}
          max_slot_wal_keep_size:  {{ .Values.crunchy.patroni.postgresql.parameters.max_slot_wal_keep_size }}
          effective_io_concurrency: {{ .Values.crunchy.patroni.postgresql.parameters.effective_io_concurrency }}
  {{- if and .Values.crunchy.proxy .Values.crunchy.proxy.enabled }}
  proxy:
    pgBouncer:
      config:
        global:
          client_tls_sslmode: disable
          pool_mode: session
          max_db_connections: {{ .Values.crunchy.proxy.pgBouncer.maxConnections | quote }}
      {{ if .Values.crunchy.proxy.pgBouncer.image }}
      image: {{ .Values.crunchy.proxy.pgBouncer.image }}
      {{ end }}
      replicas: {{ .Values.crunchy.proxy.pgBouncer.replicas }}
      # these resources are for the "pgbouncer" container in the "postgres-crunchy-ha-pgbouncer" set of pods
      # there is a sidecar in these pods which are not mentioned here, but the requests/limits are teeny weeny by default so no worries there.
      resources:
        requests:
          cpu: {{ .Values.crunchy.proxy.pgBouncer.requests.cpu }}
          memory: {{ .Values.crunchy.proxy.pgBouncer.requests.memory }}
        limits:
          memory: {{ .Values.crunchy.proxy.pgBouncer.limits.memory }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    postgres-operator.crunchydata.com/cluster:
                      {{ template "crunchy-postgres.fullname" . }}
                    postgres-operator.crunchydata.com/role: pgbouncer
  {{- end }}
  {{- end }}