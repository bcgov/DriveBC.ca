name: 1. Build & Deploy to Dev
#Will automatically run on a push to main, but can also be run manually

on:
  push:
    branches: [ "main" ]
    paths-ignore:
    - '.github/**'
  workflow_dispatch:


env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  STATIC_IMAGE_NAME: drivebc-static
  DJANGO_IMAGE_NAME: drivebc-django
  REDIS_IMAGE_NAME: drivebc-redis
  OPENSHIFTJOBS_IMAGE_NAME: drivebc-openshiftjobs

jobs:
  build-static:
    runs-on: ubuntu-latest
    name: Build & Push Static Image
    environment: dev
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.STATIC_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=latest-dev
            type=sha,format=long
          labels:
            app=drivebc
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./compose/frontend/StaticBuild
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets:
            "FONTAWESOME_PACKAGE_TOKEN=${{ secrets.FONTAWESOME_PACKAGE_TOKEN }}"
          build-args:
            "DEBUG_BUILD=true"
          cache-from: type=gha
          cache-to: type=gha,mode=max


  build-django:
    runs-on: ubuntu-latest
    name: Build & Push Backend Image
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DJANGO_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=latest-dev
            type=sha,format=long
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./compose/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args:
            "DEBUG_BUILD=true"
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-redis:
    runs-on: ubuntu-latest
    name: Build & Push Redis Image
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REDIS_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=latest-dev
            type=sha,format=long
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./compose/redis/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args:
            "DEBUG_BUILD=true"
          cache-from: type=gha
          cache-to: type=gha,mode=max


  build-openshiftjobs:
    runs-on: ubuntu-latest
    name: Build & Push OpenShift Jobs Image
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OPENSHIFTJOBS_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=latest-dev
            type=sha,format=long
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./compose/openshiftjobs/DockerFile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  update-openshift-gold:
    needs: [build-static, build-django, build-redis, build-openshiftjobs]
    runs-on: ubuntu-latest
    name: Deploy Latest Images to OpenShift Gold
    environment:
      name: dev
      url: https://dev-drivebc.apps.gold.devops.gov.bc.ca
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install CLI tools from OpenShift Mirror
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: "4"
      
    - name: Authenticate and set context
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ vars.OPENSHIFT_GOLD_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_GOLD_TOKEN }}
        namespace: ${{ vars.OPENSHIFT_NAMESPACE }}
        insecure_skip_tls_verify: true
#    - name: Helm upgrade on OpenShift Gold Environment
#      run: |
#        helm upgrade dev-drivebc -f ./infrastructure/helm/values-dev.yaml ./infrastructure/helm --set static.image.tag="sha-${{ github.sha }} --set django.image.tag="sha-${{ github.sha }} --set tasks.image.tag="sha-${{ github.sha }} --set redis.image.tag="sha-${{ github.sha }} --set openshiftjobs.image.tag="sha-${{ github.sha }}"

  # I have this run after the push to Gold because I want to make sure that Gold runs the migrations first. Gold DR can't run migrations as DB is read-only
  update-openshift-golddr:
    needs: [update-openshift-gold] 
    runs-on: ubuntu-latest
    name: Deploy Latest Images to OpenShift GoldDR
    environment:
      name: dev
      url: https://dev-drivebc.apps.golddr.devops.gov.bc.ca
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CLI tools from OpenShift Mirror
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: "4"
     
    - name: Authenticate and set context
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ vars.OPENSHIFT_GOLDDR_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_GOLDDR_TOKEN }}
        namespace: ${{ vars.OPENSHIFT_NAMESPACE }}
        insecure_skip_tls_verify: true

#    - name: Helm upgrade on OpenShift GoldDR Environment
#      run: |
#        helm upgrade dev-drivebc -f ./infrastructure/helm/values-dev.yaml -f ./infrastructure/helm/values-dev-dr.yaml ./infrastructure/helm --set static.image.tag="sha-${{ github.sha }} --set django.image.tag="sha-${{ github.sha }} --set tasks.image.tag="sha-${{ github.sha }} --set redis.image.tag="sha-${{ github.sha }} --set openshiftjobs.image.tag="sha-${{ github.sha }}"



#  automatedTests:
#    needs: [versionUpdate]
#    name: Automated Smoke Test
#    uses: bcgov/DriveBC.ca-automated-tests/.github/workflows/playwright.yml@main
#    with:
#      environment: 'dev'
#    secrets: inherit
